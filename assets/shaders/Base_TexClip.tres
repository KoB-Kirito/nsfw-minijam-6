[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://q2va1s32svrn"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_7cmhe"]
parameter_name = "Normal"
texture_type = 2
texture_repeat = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_o87uv"]
source = 5
texture_type = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ewcab"]
expanded_output_ports = [0]
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_s1tnq"]
parameter_name = "Albedo"
texture_type = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_s85dk"]
parameter_name = "Raue"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_sm4w4"]
parameter_name = "Color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_jcutk"]
operator = 4

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5um2k"]
parameter_name = "Alpha_Clip"
default_value_enabled = true
default_value = 0.5

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D Albedo : source_color, repeat_disable;
uniform vec4 Color : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float Raue : hint_range(0, 1) = 0.5;
uniform sampler2D Normal : hint_normal, repeat_disable;
uniform float Alpha_Clip = 0.5;



void fragment() {
	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(Albedo, UV);
	float n_out4p4 = n_out4p0.a;


// ColorParameter:7
	vec4 n_out7p0 = Color;


	vec3 n_out8p0;
// ColorOp:8
	{
		float base = vec3(n_out4p0.xyz).x;
		float blend = vec3(n_out7p0.xyz).x;
		if (base < 0.5) {
			n_out8p0.x = 2.0 * base * blend;
		} else {
			n_out8p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out4p0.xyz).y;
		float blend = vec3(n_out7p0.xyz).y;
		if (base < 0.5) {
			n_out8p0.y = 2.0 * base * blend;
		} else {
			n_out8p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out4p0.xyz).z;
		float blend = vec3(n_out7p0.xyz).z;
		if (base < 0.5) {
			n_out8p0.z = 2.0 * base * blend;
		} else {
			n_out8p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


// FloatParameter:6
	float n_out6p0 = Raue;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(Normal, UV);


// FloatParameter:9
	float n_out9p0 = Alpha_Clip;


// Output:0
	ALBEDO = n_out8p0;
	ALPHA = n_out4p4;
	ROUGHNESS = n_out6p0;
	NORMAL_MAP = vec3(n_out3p0.xyz);
	ALPHA_SCISSOR_THRESHOLD = n_out9p0;


}
"
graph_offset = Vector2(-891.688, 86.215)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_7cmhe")
nodes/fragment/2/position = Vector2(-1042, 898)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_o87uv")
nodes/fragment/3/position = Vector2(-420, 880)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ewcab")
nodes/fragment/4/position = Vector2(-800, -20)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture2DParameter_s1tnq")
nodes/fragment/5/position = Vector2(-1380, -140)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatParameter_s85dk")
nodes/fragment/6/position = Vector2(-360, 300)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_sm4w4")
nodes/fragment/7/position = Vector2(-560, -300)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorOp_jcutk")
nodes/fragment/8/position = Vector2(-80, -80)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_5um2k")
nodes/fragment/9/position = Vector2(-980, 560)
nodes/fragment/connections = PackedInt32Array(5, 0, 4, 2, 2, 0, 3, 2, 4, 4, 0, 1, 3, 0, 0, 9, 6, 0, 0, 3, 4, 0, 8, 0, 7, 0, 8, 1, 8, 0, 0, 0, 9, 0, 0, 19)
